package generator

import (
	"bytes"
	"io/ioutil"
	"os"
	"os/user"
	"path/filepath"
	"strings"
	"time"

	"github.com/tealeg/xlsx"
)

var (
	gengo = newGengo()
)

func Go() *Gengo {
	return gengo
}

type Gengo struct {
	genPath string
}

func newGengo() *Gengo {
	g := &Gengo{}
	return g
}

func (g *Gengo) Gen(outPath string) {

	g.genPath = outPath + "/"
	for _, f := range Xlsxfiles {
		fn := filepath.Base(f)
		if !strings.HasPrefix(fn, "~$") && strings.HasSuffix(fn, ".xlsx") {
			g.genLocal(f)
		} else {
			Warn("go: 排除非xlsx文件 ： " + f)
		}
	}
}

func (g *Gengo) genLocal(file string) {

	//Info("------------------------------------------------------------------------")
	Info("go: 正在读取Excel文件  ： " + file)

	filename := filepath.Base(file)
	filename = strings.TrimSuffix(filename, ".xlsx")

	var buf bytes.Buffer
	u, err := user.Current()
	if err == nil {
		buf.WriteString("//Generated by egen, version=" + Version + ". By " + u.Username + ", " + time.Now().Format("2006-01-02 15:04:05") + "\n")
	}
	buf.WriteString("package ")
	buf.WriteString(PackageName)
	buf.WriteString("\n")

	xf, ok := getFile(filename)
	if ok {
		//生成枚举
		for _, sheet := range xf.Sheets {
			if !strings.HasPrefix(sheet.Name, "!") && getSheetType(sheet) == "enum" {
				g.parseEnum(filename, sheet.Name, &buf)
			}
		}
		//生成类
		for _, sheet := range xf.Sheets {
			if !strings.HasPrefix(sheet.Name, "!") && sheet.Name != "@Alias" && getSheetType(sheet) == "object" {
				b := g.processBuildinSheet(filename, sheet.Name, 0)
				buf.WriteString(b.String())
				buf.WriteString("\n")
			}
		}
		outfile := g.genPath + filename + ".go"
		Info("go: 正在生成文件 ：" + outfile)
		Info("------------------------------------------------------------------------")
		_, ferr := os.Stat(outfile)
		if ferr == nil {
			os.Remove(outfile)
		}

		os.MkdirAll(filepath.Dir(outfile), 0755)
		ioutil.WriteFile(outfile, buf.Bytes(), 0666)
	}

}

func (g *Gengo) parseEnum(filename string, sheetName string, buf *bytes.Buffer) {

	sheet, ok := getFileSheet(filename, sheetName)
	if !ok {
		return
	}
	if len(sheet.Rows) < 2 {
		Error("go: 枚举表表头小于2行 : " + sheet.Name)
		return
	}
	nameList := make(map[string]bool, 0)
	valueList := make(map[string]bool, 0)

	buf.WriteString("const(\n")
	for index, row := range sheet.Rows {
		if index > 1 {
			buf.WriteString("\t")
			name := row.Cells[0].String()
			value := row.Cells[1].String()
			alias := row.Cells[2].String()
			anno := row.Cells[3].String()
			if name == "" || value == "" {
				Error("go: 错误的枚举配置，字段或值配置为空：" + sheet.Name + "/" + name)
				return
			}
			_, ok := valueList[value]
			if ok {
				Error("go: 重复的枚举值：" + sheet.Name + ":" + value)
				return
			}
			_, ok = nameList[name]
			if ok {
				Error("go: 重复的枚举字段名：" + sheet.Name + ":" + name)
				return
			}
			valueList[value] = true
			nameList[name] = true
			buf.WriteString(toUp(sheet.Name))
			buf.WriteString("_")
			buf.WriteString(name)
			buf.WriteString(" = ")
			buf.WriteString(value)
			if alias != "" || anno != "" {
				buf.WriteString("    //")
				buf.WriteString(alias + "  " + anno)
			}
			buf.WriteString("\n")
		}
	}
	buf.WriteString(")\n")
}

func (g *Gengo) processBuildinSheet(filename string, sheetName string, level int) *bytes.Buffer {
	Info("go: 正在读取子表 sheet : " + sheetName)
	buf := bytes.NewBufferString("")
	sheet, ok := getFileSheet(filename, sheetName)
	if !ok {
		return buf
	}
	buf = bytes.NewBufferString("type " + sheetName)

	if len(sheet.Rows) < 4 {
		Error("go: 表格配置" + filename + "/" + sheetName + "少于4行")
		return buf
	}
	st := "struct"
	buf.WriteString(" ")
	buf.WriteString(st + "{\n")
	level++
	fieldNameRow := sheet.Rows[2]
	fieldTypeRow := sheet.Rows[3]

	writedMap := make(map[int]bool)
	isMapFront := false //前面是map的话下一个是它的值
	for index, nameCell := range fieldNameRow.Cells {
		if isMapFront {
			continue
		}
		isMapFront = false
		typeCell := fieldTypeRow.Cells[index]
		fname := strings.TrimSpace(nameCell.String())
		tname := strings.TrimSpace(typeCell.String())
		if tname == "" || fname == "" {
			continue
		}
		pureTname := strings.TrimPrefix(tname, "[]")
		writeTypeStr := strings.TrimSpace(typeCell.String())
		if strings.HasPrefix(fname, "!") {
			Warn("go: 忽略字段：" + fname)
			continue
		}
		writed, ok := writedMap[index]
		if ok && writed {
			continue
		}
		writedMap[index] = true
		buf.WriteString(getTabs(level))
		buf.WriteString(toUp(fname))
		buf.WriteString(getTabs(1))

		var isList bool
		var isMap bool

		isList = strings.HasPrefix(tname, "[]")

		if isList {
			isMap = false
		} else {
			rightIndex := strings.Index(tname, "]")
			isMap = (strings.HasPrefix(tname, "[") && rightIndex != 1 && rightIndex != -1)
			isMapFront = isMap
		}
		var subSheetExist bool
		if !isMap {

			if pureTname == "string" || isBaseType(pureTname) {
				writeTypeStr = pureTname
			} else {
				var subSheet *xlsx.Sheet
				//枚举和类定义

				if !subSheetExist {
					ss := strings.Split(pureTname, ".")
					if len(ss) == 2 {
						subFilename := ss[0]
						subSheetName := ss[1]
						subSheet, subSheetExist = getFileSheet(subFilename, subSheetName)
					} else {
						subSheet, subSheetExist = getFileSheet(filename, pureTname)
					}
				}
				if subSheetExist {
					if getSheetType(subSheet) == "enum" {
						writeTypeStr = "int"
					} else if getSheetType(subSheet) == "object" {
						writeTypeStr = subSheet.Name
					}
				}
			}
		} else {
			//以下仅仅是为了检查配置是否正确
			newstr := strings.TrimPrefix(tname, "[")
			kvstr := strings.Split(newstr, "]")
			if len(kvstr) == 2 {
				tk := kvstr[0]
				tv := kvstr[1]
				if !isBaseType(tk) && tk != "string" {
					Error("go: Dictionary只支持key是string或基本数据类型 : " + tname)
				}
				var subFilename string
				var subSheetName string
				if !isBaseType(tv) && tv != "string" {
					//被点分开说明是外部表
					ss := strings.Split(tv, ".")
					if len(ss) == 2 {
						subFilename = ss[0]
						subSheetName = ss[1]
					} else {
						subFilename = filename
						subSheetName = tv
					}
					subSheet, ok := getFileSheet(subFilename, subSheetName)
					if getSheetType(subSheet) == "enum" {
						Error("cs: map的value不支持枚举类型 " + tname)
						continue
					}
					if !ok {
						Error("go： 找不到表 " + subFilename + "/" + subSheetName)
						continue
					} else {
						writeTypeStr = "map[" + tk + "]" + subSheetName
					}
				} else {
					writeTypeStr = "map" + writeTypeStr
				}
			} else {
				Error("go: 错误的Dictionary配置：" + tname)
			}
		}
		if !subSheetExist && !isBaseType(pureTname) && pureTname != "string" && !isMap {
			Error("go: 未知的类型定义： " + tname)
			continue
		}
		if isList || isMap {
			for i := index; i < len(fieldNameRow.Cells); i++ {
				_cell := fieldNameRow.Cells[i]
				if _cell.String() == fname {
					writedMap[i] = true
				}
			}
		}

		if isList {
			writeTypeStr = "[]" + writeTypeStr
		}
		//go配置的强制修改的类型
		goType := getCmdValue(sheet, index, "goType")
		if goType != "" {
			writeTypeStr = goType
		}
		buf.WriteString(writeTypeStr)
		buf.WriteString(" ")
		buf.WriteString("`json:\"" + fname + "\"`")
		an := getComment(sheet, index)
		if an != "" {
			buf.WriteString(" //")
			buf.WriteString(an)
		}
		buf.WriteString("\n")
	}

	buf.WriteString(getTabs(level - 1))
	buf.WriteString("}")
	return buf
}
